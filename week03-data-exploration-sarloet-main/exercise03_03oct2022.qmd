---
title: "Exercise 03"
author: "Hubert Rehrauer"
date: "03 10 2022"
format: html
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Exploratory Data Analysis

Do an exploratory data analysis of a matrix of expression values. The data consists of expression values for samples that were treated with DMSO and TSA. The samples were measured using three technologies: bulk, IFC96, IFC800. See the two RDS files `counts.RDS` and `phenodata.RDS`.

The experiment has two experimental factors "Treatment" and "Technology". Treatment has two levels, Technology has three levels. Samples that have the same combination of Treatment & Technology are replicates.

## Data Import

```{r }
x = readRDS("counts.RDS")
anno = readRDS("phenodata.RDS")
head(anno)

```

```{r ,  warning=FALSE,message=FALSE}
#Load Packages
library(magrittr)
library(ggplot2)
library(tibble)
library(pheatmap)
library(dplyr)
library(pheatmap)
library(tidyverse)
```

## Compute and visualize basic statistics on the experimental design

How many replicates are there for each combination of factor levels? How many genes have an expression value above 0 in each sample? Are there systematic differences between the samples in the different conditions (treatment & technology). Visualize the following statistics per sample:


number of detected genes

```{r }
nrow(x)
```

Number of Replicates

```{r }
anno_count<-anno %>% 
  dplyr::count(Technology, Treatment) %>%
  mutate(Condition=paste(Technology, Treatment, sep=" | "))

anno_count

```
Pie chart for visualisation of Replicates

```{r }
#Pie chart for visualisation of Replicates
ggplot(anno_count, aes(x="", y=n, fill=Condition)) +
  coord_polar("y", start=0) +geom_col(color = "black") +geom_text(aes(label = n),position = position_stack(vjust = 0.5)) 

```

Total sum of counts per sample (serves as a proxy for the number of sequenced reads per sample)

```{r }

countreads<-colSums(x) %>% 
  as.data.frame() %>%  
  set_colnames(c("Total Gene Counts"))%>%  
  rownames_to_column(var="ID")
countreads

```

```{r }

reads<-colSums(x != 0) %>% 
  as.data.frame() %>%  
  set_colnames(c("Number of Non-Zero Genes"))%>%  
  rownames_to_column(var="ID")
reads


```


```{r }
#Get the Conditions for all the replicates
anno = anno %>%
  mutate(Condition=paste(Technology, Treatment, sep=" | "))

#Histogramm for Total counts
ggplot(countreads, aes(x=ID,y=`Total Gene Counts`,fill=anno$Condition)) + geom_bar(stat="identity")+labs(x = "Sample ID", fill = "Condition")


```

Visualisation and Color the samples by the experimental condition.

```{r }

#Histogramm for the nr of nonzero reads across all the samples
ggplot(reads, aes(x=ID,y=`Number of Non-Zero Genes`,fill=anno$Condition)) + geom_bar(stat="identity")+labs(x = "Sample ID", fill = "Condition")


```

## Normalize the data

Scale the columns so that the total sum of all columns are identical

```{r }
x_T = sweep(x, 2, colSums(x) / mean(colSums(x)), FUN="/")

```

## Transform the data to log-scale

Use the function `log1p` to transform the data to log-scale

```{r }
x_T_log <- log1p(x_T)

```

## Visualize the distribution of the expression values

Use violin plots and boxplots to visualize the distribution of the expression values. Aggregate the replicates in the same experimental group into one average sample, and plot the averaged sample. Color by experimental factors.


```{r }

#Create anno_s with all information summarized
anno_s <- tibble::rowid_to_column(anno, "Sample") %>% 
  mutate_if(is.numeric, as.factor)
anno_s$Samplename <- as.character(row.names(anno))

#Aggregate the replicates in the same experimental group into one average sample
x_T_log_agg <- x_T_log
colnames(x_T_log_agg) <-anno_s$Condition

x_T_log_agg<-sapply(split(seq_len(ncol(x_T_log_agg)),colnames(x_T_log_agg)),function(cis) rowMeans(x_T_log_agg[,cis,drop=F]));

#Aggregated datafile
head(x_T_log_agg)


```


Violin Plots

```{r, warning=FALSE}
#Violin Plots with quantiles

as.data.frame(x_T_log_agg) %>%  
  pivot_longer(everything(), values_to="Expression", names_to="Condition") %>% 
  ggplot() +geom_violin(aes(x=Condition, y=Expression,col=Condition),draw_quantiles = c(0.25, 0.5, 0.75)) + theme(legend.position="none")+ scale_y_continuous(trans='log10')
```

Boxplots

```{r, warning=FALSE}
#Boxplots
as.data.frame(x_T_log_agg) %>%  
  pivot_longer(everything(), values_to="Expression", names_to="Condition") %>% 
  ggplot() + geom_boxplot(aes(x=Condition, y=Expression,col=Condition))+ theme(legend.position="none")+ scale_y_continuous(trans='log10')

```

## Most variable genes

Identify the 500 most variable genes (with largest variance across samples) and continue working with those

```{r }
var_gen = x_T_log[head(order(apply(x_T_log, 1, sd), decreasing=TRUE), 500), ]

```

## Sample correlations

Compute and visualize the sample-to-sample correlations

```{r }
var_gen_cor <- cor(var_gen)
corrplot::corrplot(var_gen_cor, method = "color", tl.pos='n')

```

## Clustering

Compute and visualize a hierarchical clustering of the samples, use the method `hclust`

```{r }

x_dist <- dist(t(var_gen))
x_hclust <- hclust(x_dist)

#Plot
plot(x_hclust, xlab = "Sample", sub = "", cex=0.3)


```


## Heatmap

Use the package `pheatmap` to generate a heatmap of the expression data.

```{r }

cluster<-select(anno_s,Condition)
row.names(cluster) = anno_s$Samplename

pheatmap(var_gen, show_colnames = FALSE, show_rownames = FALSE, annotation_col = cluster)


```
